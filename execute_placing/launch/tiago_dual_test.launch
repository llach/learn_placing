<launch>
  <arg name="arm"  default="True"/>
  <arg name="sim"  default="False"/>
  <arg name="debug"  default="False"/>
  <arg name="base_type"  default="pmb2"/>
  <arg name="ft_sensor"  default="schunk-ft"/>
  <arg name="laser_model"  default="sick-571"/>
  <arg name="end_effector"  default="pal-gripper"/>
  <arg name="camera_model"  default="orbbec-astra"/>

  <arg name="with_cam" default="false" />

  <group if="$(arg with_cam)" >
    <arg name="cam1" default="cam1" />
    <arg name="cam1_video" default="/dev/video2" />
    <arg name="publish_marker_image" default="true" />
    
    <!-- Set parameters -->
    <rosparam command="load" file="$(find state_estimation)/config/AT_settings.yaml" ns="apriltag_detector_1" />
   <rosparam command="load" file="$(find state_estimation)/config/AT_tags.yaml" ns="apriltag_detector_1" />

    <node pkg="usb_cam" type="usb_cam_node" name="usb_cam_$(arg cam1)" output="screen" >
        <param name="camera_name" value="$(arg cam1)" />
        <param name="pixel_format" value="yuyv" />
        <param name="video_device" value="$(arg cam1_video)" />
    </node>

  <node pkg="apriltag_ros" type="apriltag_ros_continuous_node" name="apriltag_detector_1" output="screen" >
    <remap from="image_rect" to="/usb_cam_$(arg cam1)/image_raw" />
    <remap from="camera_info" to="/usb_cam_$(arg cam1)/camera_info" />
    <remap from="tag_detections" to="/tag_detections_$(arg cam1)" />
    <remap from="tag_detections_image" to="/tag_detections_image_$(arg cam1)" />

    <param name="publish_tf" value="false" />
    <param name="publish_tag_detections_image" type="bool" value="$(arg publish_marker_image)" />
  </node>

    <!-- <node pkg="state_estimation" type="object_state.py" name="state_estimation"  output="screen" /> -->

    <node name="foot_table" pkg="tf2_ros" type="static_transform_publisher" args="0.75 0 0.54 0 0 0 base_footprint table" />

  </group>

    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find tiago_dual_moveit_config)/launch/planning_context.launch">
        <arg name="end_effector_left" value="pal-gripper" />
        <arg name="load_robot_description" value="true" />
        <arg name="ft_sensor_left" value="$(arg ft_sensor)" />
    </include>

    <!-- Broadcast static tf for robot root -->
    <node name="world_foot" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 world base_footprint" />
    <node name="grasped_object_tf" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 gripper_left_grasping_frame grasped_object" />

        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
    </node>

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find tiago_dual_moveit_config)/launch/move_group.launch">
        <arg name="arm_left" value="$(arg arm)"/>
        <arg name="end_effector_left" value="$(arg end_effector)"/>
        <arg name="ft_sensor_left" value="$(arg ft_sensor)"/>
        <arg name="laser_model" value="$(arg laser_model)"/>
        <arg name="camera_model" value="$(arg camera_model)"/>
        <arg name="base_type" value="$(arg base_type)"/>
        <arg name="allow_trajectory_execution" value="true"/>
        <arg name="fake_execution" value="true"/>
        <arg name="info" value="true"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>

  <!-- Run Rviz -->
  <node name="$(anon rviz)" pkg="rviz" type="rviz" output="screen" args="-d $(dirname)/tiago_dual.rviz" />
</launch>